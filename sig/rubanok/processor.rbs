module Rubanok
  class Processor
    include DSL::Matching
    include DSL::Mapping

    self.@rules: Array[bot]

    def self.call: (*untyped args) -> untyped
    def self.add_rule: (untyped rule) -> untyped
    def self.rules: () -> Array[bot]
    def self.fields_set: () -> Set[bot]
    def self.project: (untyped params) -> untyped
    def self.prepare: () { () -> untyped } -> untyped

    def initialize: (untyped input) -> untyped
    def call: (untyped params) -> untyped

    private
    attr_accessor input: untyped
    attr_accessor prepared: untyped

    alias raw input
    alias prepared? prepared

    def apply_rule!: (untyped rule, untyped params) -> (nil | untyped)
    def prepare: () -> nil
    def prepare!: () -> (nil | untyped)
    def rules: () -> Array[bot]
  end

  Plane: untyped
end
