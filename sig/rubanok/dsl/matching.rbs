module Rubanok
  class UnexpectedInputError < StandardError
  end

  module DSL
    module Matching
      class Rule < Rubanok::Rule
        METHOD_PREFIX: String
        @method_name: String
        @fields: Array[field]

        class Clause < Rubanok::Rule
          @fields: Array[field]

          attr_reader values: Array[untyped]
          attr_reader id: String
          attr_reader block: ^() -> input

          def initialize: (String id, Array[field] fields, ?untyped values, ?activate_on: field | Array[field] activate_on, ?activate_always: bool activate_always) { () -> input } -> void
          def applicable?: (params) -> bool

          alias to_method_name id
        end

        attr_reader clauses: Array[Clause]

        def initialize: () -> void

        def matching_clause: (params) -> Clause?
        def having: (*untyped values) { () -> input } -> void
        def default: () { () -> input } -> void

        private
        def build_method_name: () -> String
      end

      module ClassMethods
        def match: (*field fields, ?activate_on: field | Array[field] activate_on, ?activate_always: bool activate_always) { () -> void } -> void
      end

      def self.included: (singleton(Processor) base) -> void

      def default_match_handler: (Rule rule, params, bool? fail_when_no_matches) -> void
    end
  end
end
